class Shape{
  constructor(data){
    this.points = data.split('/').map(k => {
      let [x,y,z,n] = k.split(',');
      return {x:x, y:y, z:z, img:n};
    });
  }
  
}

class ShapeManager{
  constructor(){
    this.shapes = {
    square: new Shape("-280,280,0,30/-200,280,0,30/-120,280,0,30/-40,280,0,30/40,280,0,30/120,280,0,30/200,280,0,30/280,280,0,30/-280,200,0,30/-200,200,0,38/-120,200,0,38/-40,200,0,38/40,200,0,38/120,200,0,38/200,200,0,38/280,200,0,30/-280,120,0,30/-200,120,0,30/-120,120,0,38/-40,120,0,30/40,120,0,30/120,120,0,38/200,120,0,30/280,120,0,30/-280,40,0,30/-200,40,0,30/-120,40,0,38/-40,40,0,30/40,40,0,30/120,40,0,38/200,40,0,30/280,40,0,30/-280,-40,0,30/-200,-40,0,30/-120,-40,0,38/-40,-40,0,30/40,-40,0,30/120,-40,0,38/200,-40,0,30/280,-40,0,30/-280,-120,0,30/-200,-120,0,30/-120,-120,0,38/-40,-120,0,30/40,-120,0,30/120,-120,0,38/200,-120,0,30/280,-120,0,30/-280,-200,0,30/-200,-200,0,38/-120,-200,0,38/-40,-200,0,38/40,-200,0,38/120,-200,0,38/200,-200,0,38/280,-200,0,30/-280,-280,0,30/-200,-280,0,30/-120,-280,0,30/-40,-280,0,30/40,-280,0,30/120,-280,0,30/200,-280,0,30/280,-280,0,30"),
    
    man: new Shape("0,210,0,110/30,230,-60,11/-30,230,-60,11/0,200,-70,12/0,120,0,108/0,30,0,110/0,-60,0,110/0,-150,0,110/40,-190,-60,107/-40,-190,-60,107/0,-170,-70,105/0,-190,-80,105/0,-230,-85,105/90,-190,0,108/110,-240,0,108/120,-300,0,108/120,-360,0,108/120,-450,0,110/-90,-190,0,108/-110,-240,0,108/-120,-300,0,108/-120,-360,0,108/-120,-450,0,110/100,30,0,108/130,-20,20,108/150,-70,40,108/160,-130,40,108/-100,30,0,108/-130,-20,20,108/-150,-70,40,108/-160,-130,40,108/160,-140,0,107/150,-145,-40,106/145,-150,-80,105/-160,-140,0,107/-150,-145,-40,106/-145,-150,-80,105"),
      
    woman: new Shape("0,210,0,110/30,230,-60,83/-30,230,-60,83/0,200,-70,84/0,120,0,108/0,30,0,110/0,-60,0,110/0,-150,0,110/50,0,-70,110/-50,0,-70,110/50,0,-130,80/-50,0,-130,80/40,-190,-50,82/-40,-190,-50,82/0,-230,-40,82/90,-190,0,108/110,-240,0,108/120,-300,0,108/120,-360,0,108/120,-450,0,110/-90,-190,0,108/-110,-240,0,108/-120,-300,0,108/-120,-360,0,108/-120,-450,0,110/100,30,0,108/130,-20,20,108/150,-70,40,108/160,-130,40,108/-100,30,0,108/-130,-20,20,108/-150,-70,40,108/-160,-130,40,108/160,-140,0,107/150,-145,-40,106/145,-150,-80,105/-160,-140,0,107/-150,-145,-40,106/-145,-150,-80,105"),
      
    tardi: new Shape("0,280,0,6/-40,200,-40,94/-40,200,40,94/40,200,-40,94/40,200,40,94/-80,120,-80,94/-80,120,0,94/-80,120,80,94/80,120,-80,94/80,120,0,94/80,120,80,94/0,120,-80,94/0,120,80,94/-70,40,-70,93/-70,40,0,93/-70,40,70,93/70,40,-70,93/70,40,0,93/70,40,70,93/0,40,-70,93/0,40,70,93/-70,-40,-70,93/-70,-40,0,21/-70,-40,70,93/70,-40,-70,93/70,-40,0,21/70,-40,70,93/0,-40,-70,21/0,-40,70,21/-70,-120,-70,93/-70,-120,0,93/-70,-120,70,93/70,-120,-70,93/70,-120,0,93/70,-120,70,93/0,-120,-70,93/0,-120,70,93/-70,-200,-70,93/-70,-200,0,93/-70,-200,70,93/70,-200,-70,93/70,-200,0,93/70,-200,70,93/0,-200,-70,93/0,-200,70,93/-70,-280,-70,93/-70,-280,0,93/-70,-280,70,93/70,-280,-70,93/70,-280,0,93/70,-280,70,93/0,-280,-70,93/0,-280,70,93/0,-280,0,93")
    };
  }
  getAll(){
    return this.shapes;
  }
  getCopyOf(shapeName){
    let result = this.shapes[shapeName];
    // Values copy
    result.p = result.points.map(p=>({x:p.x, y:p.y, z:p.z, img:p.img}));
    return result;
  }
  getNames(){
    return Object.keys(this.shapes);
  }
}
