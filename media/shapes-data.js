class Shape{
  constructor(data, defBall=0, params=null){
    this.points = data.split('|').map(k => {
      let [x,y,z,n] = k.split(',');
      if(n === undefined) n = defBall;
      return {x:x, y:y, z:z, img:n};
    });
    if(params !== null){
      const me = this;
      Object.keys(params).forEach(k => me[k] = params[k]);
    }
    // Animates and return true if something moved
    this.animate = ()=>{return false};
  }
  
}

class ShapeManager{
  constructor(){
    this.shapes = {
      square: new Shape("-280,280,0,29|-200,280,0,29|-120,280,0,29|-40,280,0,29|40,280,0,29|120,280,0,29|200,280,0,29|280,280,0,29|-280,200,0,29|-200,200,0,37|-120,200,0,37|-40,200,0,37|40,200,0,37|120,200,0,37|200,200,0,37|280,200,0,29|-280,120,0,29|-200,120,0,29|-120,120,0,37|-40,120,0,29|40,120,0,29|120,120,0,37|200,120,0,29|280,120,0,29|-280,40,0,29|-200,40,0,29|-120,40,0,37|-40,40,0,29|40,40,0,29|120,40,0,37|200,40,0,29|280,40,0,29|-280,-40,0,29|-200,-40,0,29|-120,-40,0,37|-40,-40,0,29|40,-40,0,29|120,-40,0,37|200,-40,0,29|280,-40,0,29|-280,-120,0,29|-200,-120,0,29|-120,-120,0,37|-40,-120,0,29|40,-120,0,29|120,-120,0,37|200,-120,0,29|280,-120,0,29|-280,-200,0,29|-200,-200,0,37|-120,-200,0,37|-40,-200,0,37|40,-200,0,37|120,-200,0,37|200,-200,0,37|280,-200,0,29|-280,-280,0,29|-200,-280,0,29|-120,-280,0,29|-40,-280,0,29|40,-280,0,29|120,-280,0,29|200,-280,0,29|280,-280,0,29"),
    
      tube: new Shape("0,280,80,29|56,280,56,29|80,280,0,29|56,280,-57,29|0,280,-80,29|-57,280,-57,29|-80,280,-1,29|-57,280,56,29|0,200,80,29|56,200,56,37|80,200,0,37|56,200,-57,37|0,200,-80,37|-57,200,-57,37|-80,200,-1,37|-57,200,56,29|0,120,80,29|56,120,56,29|80,120,0,37|56,120,-57,29|0,120,-80,29|-57,120,-57,37|-80,120,-1,29|-57,120,56,29|0,40,80,29|56,40,56,29|80,40,0,37|56,40,-57,29|0,40,-80,29|-57,40,-57,37|-80,40,-1,29|-57,40,56,29|0,-40,80,29|56,-40,56,29|80,-40,0,37|56,-40,-57,29|0,-40,-80,29|-57,-40,-57,37|-80,-40,-1,29|-57,-40,56,29|0,-120,80,29|56,-120,56,29|80,-120,0,37|56,-120,-57,29|0,-120,-80,29|-57,-120,-57,37|-80,-120,-1,29|-57,-120,56,29|0,-200,80,29|56,-200,56,37|80,-200,0,37|56,-200,-57,37|0,-200,-80,37|-57,-200,-57,37|-80,-200,-1,37|-57,-200,56,29|0,-280,80,29|56,-280,56,29|80,-280,0,29|56,-280,-57,29|0,-280,-80,29|-57,-280,-57,29|-80,-280,-1,29|-57,-280,56,29"),
      
      sphere: new Shape("0,85,234|60,60,234|85,0,234|60,-61,234|0,-86,234|-61,-61,234|-86,-1,234|-61,60,234|0,160,191|113,113,191|160,0,191|113,-114,191|0,-161,191|-114,-114,191|-161,-1,191|-114,113,191|0,216,125|152,152,125|216,0,125|152,-154,125|0,-217,125|-154,-154,125|-217,-1,125|-154,152,125|0,246,43|173,173,43|246,0,43|173,-175,43|0,-247,43|-175,-175,43|-247,-1,43|-175,173,43|0,246,-44|173,173,-44|246,0,-44|173,-175,-44|0,-247,-44|-175,-175,-44|-247,-1,-44|-175,173,-44|0,216,-126|152,152,-126|216,0,-126|152,-154,-126|0,-217,-126|-154,-154,-126|-217,-1,-126|-154,152,-126|0,160,-192|113,113,-192|160,0,-192|113,-114,-192|0,-161,-192|-114,-114,-192|-161,-1,-192|-114,113,-192|0,85,-235|60,60,-235|85,0,-235|60,-61,-235|0,-86,-235|-61,-61,-235|-86,-1,-235|-61,60,-235", 37),
      
      man: new Shape("0,210,0,110|30,230,-60,11|-30,230,-60,11|0,200,-70,12|0,120,0,108|0,30,0,110|0,-60,0,110|0,-150,0,110|40,-190,-60,107|-40,-190,-60,107|0,-170,-70,105|0,-190,-80,105|0,-230,-85,105|90,-190,0,108|110,-240,0,108|120,-300,0,108|120,-360,0,108|120,-450,0,110|-90,-190,0,108|-110,-240,0,108|-120,-300,0,108|-120,-360,0,108|-120,-450,0,110|100,30,0,108|130,-20,20,108|150,-70,40,108|160,-130,40,108|-100,30,0,108|-130,-20,20,108|-150,-70,40,108|-160,-130,40,108|160,-140,0,107|150,-145,-40,106|145,-150,-80,105|-160,-140,0,107|-150,-145,-40,106|-145,-150,-80,105"),
      
      woman: new Shape("0,210,0,110|30,230,-60,83|-30,230,-60,83|0,200,-70,84|0,120,0,108|0,30,0,110|0,-60,0,110|0,-150,0,110|50,0,-70,110|-50,0,-70,110|50,0,-130,80|-50,0,-130,80|40,-190,-50,82|-40,-190,-50,82|0,-230,-40,82|90,-190,0,108|110,-240,0,108|120,-300,0,108|120,-360,0,108|120,-450,0,110|-90,-190,0,108|-110,-240,0,108|-120,-300,0,108|-120,-360,0,108|-120,-450,0,110|100,30,0,108|130,-20,20,108|150,-70,40,108|160,-130,40,108|-100,30,0,108|-130,-20,20,108|-150,-70,40,108|-160,-130,40,108|160,-140,0,107|150,-145,-40,106|145,-150,-80,105|-160,-140,0,107|-150,-145,-40,106|-145,-150,-80,105"),
      
      tardi: new Shape("0,280,0,6|-40,200,-40,94|-40,200,40,94|40,200,-40,94|40,200,40,94|-80,120,-80,94|-80,120,0,94|-80,120,80,94|80,120,-80,94|80,120,0,94|80,120,80,94|0,120,-80,94|0,120,80,94|-70,40,-70,93|-70,40,0,93|-70,40,70,93|70,40,-70,93|70,40,0,93|70,40,70,93|0,40,-70,93|0,40,70,93|-70,-40,-70,93|-70,-40,0,21|-70,-40,70,93|70,-40,-70,93|70,-40,0,21|70,-40,70,93|0,-40,-70,21|0,-40,70,21|-70,-120,-70,93|-70,-120,0,93|-70,-120,70,93|70,-120,-70,93|70,-120,0,93|70,-120,70,93|0,-120,-70,93|0,-120,70,93|-70,-200,-70,93|-70,-200,0,93|-70,-200,70,93|70,-200,-70,93|70,-200,0,93|70,-200,70,93|0,-200,-70,93|0,-200,70,93|-70,-280,-70,93|-70,-280,0,93|-70,-280,70,93|70,-280,-70,93|70,-280,0,93|70,-280,70,93|0,-280,-70,93|0,-280,70,93|0,-280,0,93"),
      
      // Rotation du rotor : x=+/-[80,150,210,160]*sin(a)   y=-200   z=-100+/-[80,150,210,160]*cos(a) (huit premiers points)
      heli: new Shape("0,-200,-20,85|0,-200,-180,85|0,-200,50,84|0,-200,-250,84|0,-200,110,83|0,-200,-310,83|0,-200,160,82|0,-200,-360,82|240,100,160,77|240,100,80,77|240,100,0,77|240,100,-70,76|240,100,-130,75|240,100,-180,74|-240,100,160,77|-240,100,80,77|-240,100,0,77|-240,100,-70,76|-240,100,-130,75|-240,100,-180,74|-180,60,40,74|-180,60,-40,74|180,60,40,74|180,60,-40,74|0,10,-180,77|0,30,-100,77|0,30,-20,77|0,30,60,77|0,10,120,75|80,10,-180,75|80,30,-100,77|80,30,-20,77|80,30,60,77|80,10,120,75|-80,10,-180,75|-80,30,-100,77|-80,30,-20,77|-80,30,60,77|-80,10,120,75|80,-50,-180,77|80,-50,-100,77|80,-50,-20,77|80,-50,60,21|0,-50,60,21|-80,-50,-180,77|-80,-50,-100,77|-80,-50,-20,77|-80,-50,60,21|70,-120,-180,77|80,-130,-100,77|80,-130,-20,21|-70,-120,-180,77|-80,-130,-100,77|-80,-130,-20,21|0,-130,-180,77|0,-130,-100,75|0,-130,-20,21|0,-50,-220,77|0,-60,-290,76|0,-70,-350,75|0,-80,-400,74|0,-170,-100,84", 77,{a:0})
    };
    // this.shapes['heli'].points = this.shapes['heli'].points.slice(0,58);
    
    // Animations
    this.shapes['heli'].animate = function() {
      [80,150,210,160].forEach((radius, i) => {
        let x = ~~(radius*Math.sin(this.a));
        let z = ~~(radius*Math.cos(this.a));
        this.p[i*2].x = x;
        this.p[i*2].z = z-100;
        this.p[i*2+1].x = -x;
        this.p[i*2+1].z = -z-100;
      });
      this.a += 0.08;
      return true;
    }
    
    // Bindings
    Object.keys(this.shapes).forEach(key => {
      const o = this.shapes[key];
      o.animate = o.animate.bind(o);
    });
  }
  getAll(){
    return this.shapes;
  }
  getCopyOf(shapeName){
    let result = this.shapes[shapeName];
    // Values copy
    result.p = result.points.map(p=>({x:p.x, y:p.y, z:p.z, img:p.img}));
    return result;
  }
  getNames(){
    return Object.keys(this.shapes);
  }
}
